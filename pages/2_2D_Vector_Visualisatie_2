import math
import streamlit as st
import plotly.graph_objects as go
import pandas as pd

st.set_page_config(page_title="🧭 2D Vector Visualisatie", layout="wide")
st.title("🧭 2D Vector Visualisatie")

# Hulpfuncties
def vec_norm(x, y):
    return math.sqrt(x*x + y*y)

def calc_angle(x, y):
    return math.degrees(math.atan2(y, x)) if (x != 0 or y != 0) else None

# Session state
if "entries2d" not in st.session_state:
    st.session_state.entries2d = [{"x": 0.0, "y": 0.0, "force": 0.0, "color": "#1f77b4"}]

# Sidebar instellingen
with st.sidebar:
    st.header("Instellingen")
    show_resultant = st.checkbox("Toon resultante vector", value=True)
    resultant_color = st.color_picker("Kleur resultante", value="#e41a1c")
    if st.button("🗑️ Verwijder alle vectoren"):
        st.session_state.entries2d = [{"x": 0.0, "y": 0.0, "force": 0.0, "color": "#1f77b4"}]

# Vector invoer
st.subheader("Vectoren invoeren (van oorsprong)")

if st.button("➕ Voeg rij toe"):
    st.session_state.entries2d.append({"x": 0.0, "y": 0.0, "force": 0.0, "color": "#1f77b4"})

new_entries = []
for i, ent in enumerate(st.session_state.entries2d):
    cols = st.columns([1.5, 1.5, 1.5, 1.5, 0.5])
    with cols[0]:
        force = st.number_input(f"Kracht {i+1} (optioneel)", value=float(ent["force"]), min_value=0.0, key=f"force_{i}")
    with cols[1]:
        x = st.number_input(f"X{i+1}", value=float(ent["x"]), key=f"x_{i}")
    with cols[2]:
        y = st.number_input(f"Y{i+1}", value=float(ent["y"]), key=f"y_{i}")
    with cols[3]:
        color = st.color_picker(f"Kleur {i+1}", value=ent.get("color", "#1f77b4"), key=f"color_{i}")
    with cols[4]:
        if st.button("🗑️", key=f"del_{i}"):
            pass
        else:
            new_entries.append({"x": x, "y": y, "force": force, "color": color})

st.session_state.entries2d = new_entries

# Berekeningen
vectors = []
for ent in st.session_state.entries2d:
    x, y = ent["x"], ent["y"]
    mag = vec_norm(x, y)
    if ent["force"] > 0 and mag > 1e-12:
        s = ent["force"] / mag
        x, y = x*s, y*s
    vectors.append((x, y, ent["color"]))

# Plot maken
fig = go.Figure()

for i, (x, y, color) in enumerate(vectors, start=1):
    fig.add_trace(go.Scatter(
        x=[0, x], y=[0, y],
        mode="lines+markers",
        line=dict(color=color, width=3),
        marker=dict(size=6, color=color),
        name=f"Vector {i}"
    ))

Rx = Ry = 0
if vectors:
    Rx = sum(x for x, y, _ in vectors)
    Ry = sum(y for x, y, _ in vectors)
    if show_resultant:
        fig.add_trace(go.Scatter(
            x=[0, Rx], y=[0, Ry],
            mode="lines+markers",
            line=dict(color=resultant_color, width=4),
            marker=dict(size=8, color=resultant_color),
            name="Resultante"
        ))

fig.update_layout(
    xaxis=dict(title="X-as", zeroline=True),
    yaxis=dict(title="Y-as", zeroline=True, scaleanchor="x", scaleratio=1),
    margin=dict(l=20, r=20, t=40, b=20),
    showlegend=True
)

st.plotly_chart(fig, use_container_width=True)

# Resultaten
if vectors:
    rows = []
    for i, (x, y, color) in enumerate(vectors, start=1):
        mag = vec_norm(x, y)
        angle = calc_angle(x, y)
        rows.append({
            "Vector": f"{i}",
            "X": round(x, 2), "Y": round(y, 2),
            "|v|": round(mag, 2),
            "θ (° vanaf X-as)": None if angle is None else round(angle, 2),
            "Kleur": color
        })

    Rmag = vec_norm(Rx, Ry)
    Rangle = calc_angle(Rx, Ry)
    rows.append({
        "Vector": "Resultante",
        "X": round(Rx, 2), "Y": round(Ry, 2),
        "|R|": round(Rmag, 2),
        "θ (° vanaf X-as)": None if Rangle is None else round(Rangle, 2),
        "Kleur": resultant_color
    })

    st.markdown("### Resultaten")
    st.dataframe(pd.DataFrame(rows), use_container_width=True)
